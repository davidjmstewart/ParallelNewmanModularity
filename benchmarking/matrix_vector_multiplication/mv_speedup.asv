clear all;
close all;

fig = figure;
matrix_sizes = [128, 256, 512, 1024, 2048, 4096, 8192, 16384];
% matrix_sizes = [1000000, 2000000, 3000000, 4000000];

parallel_timings = [
0.000018507  0.001021027  0.000678180  0.000921913  0.000737740  0.001464787  0.002827580  0.003398427;
0.000078073  0.001175627  0.000612927  0.000917800  0.001285820  0.002052087  0.003384833  0.003656487;
0.000372093  0.000895620  0.001040127  0.001447967  0.001542840  0.002251007  0.003703087  0.004495967;
0.001549093  0.001199733  0.001373393  0.001266227  0.001597087  0.002211240  0.002623260  0.003759127;
0.005406727  0.003373927  0.003193407  0.003181473  0.003062553  0.003217807  0.004143987  0.005191253;
0.022234473  0.012848833  0.009228453  0.007413647  0.006615660  0.006869607  0.008766620  0.009343153;
0.086336613  0.045515567  0.032609907  0.027009893  0.025305107  0.023423133  0.023199540  0.024284413;
0.334162927  0.174504847  0.127825160  0.106875500  0.095626047  0.092990533  0.090253667  0.092837313; ];

python_sequential_averages = [
1.5890000000001737e-05, 0.00032615999999999754, 0.0007261499999999977, 0.0029500099999999916, 0.011393629999999978, 0.04766399000000003, 0.18549439999999962, 0.7896764600000011
];

T = [1: 8];

sequential_averages = [
0.000018567 
0.000090707 
0.000598660 
0.001977800 
0.006093933 
0.023465120 
0.086270107 
0.340525380 
]


for i = 1:size(parallel_timings, 1)
    subplot(4,2,i); 
    hold on;
    grid on;
%     xlim([1 16]);
%     ylim([0 6]);
    hold on;
    plot(T, parallel_timings(i,:).^-1 * sequential_averages(i), 'LineWidth', 2);
    plot(T, parallel_timings(i,:).^-1 * python_sequential_averages(i), 'LineWidth', 2);
    legend('Speedup (relative to sequential C)','Speedup (relative to sequential Python)','Cache blocking (64)', 'Cache blocking (128)')

    hold off;
    title(sprintf('%d element Vector',matrix_sizes(i)));
end

handle=axes(fig,'visible','off'); 
handle.XLabel.Visible='on';
handle.YLabel.Visible='on';
handle.Title.Visible='on';
ylabel(handle,'Speedup');
xlabel(handle,'Number of threads');
title(handle,'Speedup of parallelising Matrix-Vector multiplication with OpenMP threads');
handle.Title.Position(2) = 1.05
grid on;





fig = figure;
% matrix_sizes = [1000000, 2000000, 3000000, 4000000];

parallel_timings = [
0.000010780  0.001213853  0.000700620  0.000531727  0.001014840  0.001894100  0.003385093  0.003305047;
0.000072493  0.000648393  0.000909480  0.000689327  0.001166607  0.001915480  0.001989407  0.002939240;
0.000154920  0.000875100  0.000653807  0.000567353  0.001051973  0.002173927  0.002981953  0.003643033;
0.000570080  0.000860513  0.001066533  0.001277613  0.001419800  0.002049967  0.003021807  0.004088453;
0.002805927  0.002175187  0.002056867  0.002032300  0.002047713  0.002429267  0.003589160  0.004090240;
0.009819700  0.007735113  0.006803533  0.006205500  0.005708320  0.005898000  0.006725513  0.007175547;
0.040862287  0.028971113  0.024414847  0.023130907  0.021988480  0.020599980  0.022283733  0.024249400;
0.155414673  0.106772853  0.089861900  0.087946433  0.081009887  0.079680100  0.082918053  0.079510880; ]

T = [1: 8];

python_sequential_averages = [
9.509999999998686e-06, 
4.537000000000013e-05,
0.0005918900000000005,
0.001877289999999998,
0.0071921899999999985,
0.027735839999999977,
0.1011943800000001,
0.4075684999999993
];

parallel_timings_with_cache_block_64 = [
    
0.000012160  0.001086327  0.001303287  0.000740567  0.001213093  0.001757100  0.002764220  0.004157553;
0.000052080  0.001392067  0.001155927  0.001517920  0.001908893  0.002295547  0.003882547  0.004701120;
0.000356740  0.001475227  0.000969600  0.001911627  0.003466180  0.003516673  0.004207180  0.004477360;
0.001915233  0.001034687  0.001585680  0.001930367  0.002237273  0.002846040  0.004332327  0.003872000;
0.003726627  0.002722693  0.002572540  0.002523373  0.002708107  0.003281333  0.003654087  0.004934127;
0.015037607  0.011479927  0.009159580  0.008377720  0.008103813  0.008167760  0.009307100  0.008906027;
0.056371007  0.036370013  0.029310827  0.028868320  0.027531120  0.027664940  0.026556067  0.026637340;
0.229047847  0.149588360  0.123413240  0.110354107  0.102206900  0.100108547  0.098654247  0.106797240;

];

parallel_timings_with_cache_block_128 = [
    
0.000014933  0.000794860  0.000827713  0.000785073  0.001177453  0.001697780  0.003091493  0.003863873;
0.000038933  0.001103167  0.000584660  0.001621087  0.001246080  0.002287907  0.003598840  0.003923887;
0.000244067  0.000946727  0.000854300  0.001144980  0.001061927  0.002090500  0.002798853  0.003922200;
0.000968227  0.000820940  0.001096107  0.001061113  0.001269847  0.002652700  0.003538787  0.003801313;
0.003149233  0.002385220  0.002472407  0.002116260  0.002816380  0.003087807  0.003836580  0.005034987;
0.012219947  0.008817420  0.007611540  0.007464720  0.007060007  0.007518333  0.007935447  0.008797413;
0.060805267  0.040563073  0.031691933  0.028691707  0.027427967  0.027366567  0.028708773  0.029115820;
0.200006847  0.133841820  0.108478473  0.106037187  0.098513700  0.092656887  0.094730213  0.095034153;

];


parallel_timings_with_cache_block_256 = [
    
0 0 0 0 0 0 0 0;
0.000066247  0.001192013  0.000739293  0.001008553  0.001478493  0.002205253  0.003540647  0.003873067;
0.000228573  0.000943920  0.000836667  0.001146433  0.001252180  0.001562947  0.003318660  0.003613633;
0.001518547  0.002010180  0.001934667  0.002407813  0.001796820  0.003620260  0.003935980  0.003540513;
0.003927300  0.003172113  0.002822207  0.003310633  0.003561700  0.004063367  0.005498767  0.005726987;
0.013962973  0.010338733  0.009052520  0.007876207  0.008303033  0.007747527  0.009082227  0.009455540;
0.058288333  0.040827687  0.033835607  0.030575580  0.029909000  0.029483453  0.030098360  0.030032767;
0.191064733  0.123790313  0.109304340  0.102582947  0.099295653  0.101080647  0.096836287  0.095260767;

];


for i = 1:size(parallel_timings, 1)
    subplot(4,2,i); 
    hold on;
    grid on;
%     xlim([1 16]);
%     ylim([0 6]);
    hold on;
    plot(T, parallel_timings(i,:).^-1 * sequential_averages(i), 'LineWidth', 2);
    plot(T, parallel_timings(i,:).^-1 * python_sequential_averages(i), 'LineWidth', 2);
    plot(T, parallel_timings_with_cache_block_64(i,:).^-1 * sequential_averages(i), 'LineWidth', 2);
    plot(T, parallel_timings_with_cache_block_128(i,:).^-1 * sequential_averages(i), 'LineWidth', 2);
    plot(T, parallel_timings_with_cache_block_256(i,:).^-1 * sequential_averages(i), 'LineWidth', 2);

    legend('Speedup compared to sequential C implementation','Speedup compared to sequential Python implementation','Cache blocking (64)', 'Cache blocking (128)')

    hold off;
    title(sprintf('%d element Vector',matrix_sizes(i)));
end

handle=axes(fig,'visible','off'); 
handle.XLabel.Visible='on';
handle.YLabel.Visible='on';
handle.Title.Visible='on';
ylabel(handle,'Speedup');
xlabel(handle,'Number of threads');
title(handle,'Speedup of parallelising Matrix-Vector multiplication with OpenMP threads and SIMD support');
handle.Title.Position(2) = 1.05
grid on;

